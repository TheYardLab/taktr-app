"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "lib_exportToPdf_tsx";
exports.ids = ["lib_exportToPdf_tsx"];
exports.modules = {

/***/ "./lib/exportToPdf.tsx":
/*!*****************************!*\
  !*** ./lib/exportToPdf.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXPORT_LOGO_KEY: () => (/* binding */ EXPORT_LOGO_KEY),\n/* harmony export */   chooseAndStoreLogo: () => (/* binding */ chooseAndStoreLogo),\n/* harmony export */   clearStoredLogo: () => (/* binding */ clearStoredLogo),\n/* harmony export */   exportElementToPdf: () => (/* binding */ exportElementToPdf),\n/* harmony export */   getStoredLogo: () => (/* binding */ getStoredLogo)\n/* harmony export */ });\n/* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! html2canvas */ \"html2canvas\");\n/* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(html2canvas__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf */ \"jspdf\");\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jspdf__WEBPACK_IMPORTED_MODULE_1__);\n// lib/exportToPdf.ts\n\n\n/**\n * Export a DOM element to PDF, capturing the full scroll size (not just the visible part).\n * If a child has data-export-width/height (as in TaktPlanSection), those are preferred.\n */ async function exportElementToPdf(el, filename, opts = {}) {\n    const { logo, title = \"\", orientation = \"l\", pageSize = \"a4\", margin = 24, scale = 2 } = opts;\n    // If TaktPlanSection exposed explicit dimensions, use them\n    const size = window.__TAKTR_GET_EXPORT_SIZE?.();\n    const target = size ? el.querySelector(\"[data-export-width][data-export-height]\") : null;\n    const width = size?.w || (target ? target.scrollWidth : el.scrollWidth);\n    const height = size?.h || (target ? target.scrollHeight : el.scrollHeight);\n    // Clone offscreen at full size so we can render everything in one go\n    const clone = el.cloneNode(true);\n    clone.style.width = width + \"px\";\n    clone.style.height = height + \"px\";\n    clone.style.maxWidth = \"none\";\n    clone.style.maxHeight = \"none\";\n    clone.style.overflow = \"visible\";\n    const wrapper = document.createElement(\"div\");\n    wrapper.style.position = \"fixed\";\n    wrapper.style.left = \"-100000px\";\n    wrapper.style.top = \"0\";\n    wrapper.appendChild(clone);\n    document.body.appendChild(wrapper);\n    try {\n        const canvas = await html2canvas__WEBPACK_IMPORTED_MODULE_0___default()(clone, {\n            backgroundColor: \"#ffffff\",\n            scale,\n            useCORS: true,\n            logging: false,\n            width,\n            height,\n            windowWidth: width,\n            windowHeight: height\n        });\n        const pdf = new (jspdf__WEBPACK_IMPORTED_MODULE_1___default())({\n            orientation,\n            unit: \"pt\",\n            format: pageSize\n        });\n        const pageW = pdf.internal.pageSize.getWidth();\n        const pageH = pdf.internal.pageSize.getHeight();\n        // Header space\n        const headerH = 36; // pt\n        const usableW = pageW - margin * 2;\n        const usableH = pageH - margin * 2 - headerH;\n        // Scale image to page width, then slice vertically across pages\n        const imgW = usableW;\n        const imgH = canvas.height * imgW / canvas.width;\n        let remaining = imgH;\n        let sy = 0; // source y within big canvas\n        const sliceH = usableH / imgH * canvas.height; // source slice height per page\n        let pageIndex = 0;\n        while(remaining > 0){\n            if (pageIndex > 0) pdf.addPage();\n            // Header: logo (left) + title (center)\n            if (logo) {\n                try {\n                    const logoW = headerH * 2.2;\n                    pdf.addImage(logo, \"PNG\", margin, margin, logoW, headerH);\n                } catch  {\n                // ignore bad logo data\n                }\n            }\n            if (title) {\n                pdf.setFontSize(12);\n                pdf.text(title, pageW / 2, margin + headerH / 2 + 4, {\n                    align: \"center\",\n                    baseline: \"middle\"\n                });\n            }\n            // Slice a portion of the big canvas for this page\n            const sWidth = canvas.width;\n            const sHeight = Math.min(sliceH, canvas.height - sy);\n            const dWidth = imgW;\n            const dHeight = sHeight / canvas.height * imgH;\n            const pageCanvas = document.createElement(\"canvas\");\n            pageCanvas.width = sWidth;\n            pageCanvas.height = sHeight;\n            const ctx = pageCanvas.getContext(\"2d\");\n            ctx.drawImage(canvas, 0, sy, sWidth, sHeight, 0, 0, sWidth, sHeight);\n            const pageImg = pageCanvas.toDataURL(\"image/png\");\n            pdf.addImage(pageImg, \"PNG\", margin, margin + headerH, dWidth, dHeight, undefined, \"FAST\");\n            remaining -= dHeight;\n            sy += sHeight;\n            pageIndex++;\n        }\n        pdf.save(filename);\n    } finally{\n        document.body.removeChild(wrapper);\n    }\n}\n// ---- Logo helpers (optional) ----------------------------------------------\nconst EXPORT_LOGO_KEY = \"exportLogo\";\n/** Return the saved logo dataURL from localStorage (if any). */ function getStoredLogo() {\n    if (true) return null;\n    try {\n        return localStorage.getItem(EXPORT_LOGO_KEY);\n    } catch  {\n        return null;\n    }\n}\n/** Remove the saved logo from localStorage. */ function clearStoredLogo() {\n    if (true) return;\n    try {\n        localStorage.removeItem(EXPORT_LOGO_KEY);\n    } catch  {\n    /* ignore */ }\n}\n/**\n * Opens a file picker for an image, stores it in localStorage under EXPORT_LOGO_KEY,\n * and returns the dataURL (or null if the user cancels).\n *\n * Usage:\n *   const logo = await chooseAndStoreLogo();\n *   if (logo) setExportLogo(logo);\n */ async function chooseAndStoreLogo() {\n    if (true) return null;\n    return new Promise((resolve)=>{\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        input.accept = \"image/*\";\n        input.style.position = \"fixed\";\n        input.style.left = \"-9999px\";\n        document.body.appendChild(input);\n        input.onchange = ()=>{\n            const file = input.files?.[0];\n            if (!file) {\n                cleanup();\n                resolve(null);\n                return;\n            }\n            const reader = new FileReader();\n            reader.onload = ()=>{\n                const dataUrl = String(reader.result || \"\");\n                try {\n                    localStorage.setItem(EXPORT_LOGO_KEY, dataUrl);\n                } catch  {\n                // ignore quota or storage errors\n                }\n                cleanup();\n                resolve(dataUrl);\n            };\n            reader.onerror = ()=>{\n                cleanup();\n                resolve(null);\n            };\n            reader.readAsDataURL(file);\n        };\n        function cleanup() {\n            document.body.removeChild(input);\n        }\n        input.click();\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/exportToPdf.tsx\n");

/***/ })

};
;